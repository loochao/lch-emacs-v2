;;; Automatically generated on Wed Jan  9 10:00:31 2013
;;; Invoked by LooChao@dynamic-oit-equadnet-a-2.princeton.edu using 23.3.1
(setq-default kill-ring '(#(";;; provide
(provide 'lch-elisp)
(message \"~~ lch-elisp: done.\")

;;; Local Vars.
;; Local Variables:
;; mode: emacs-lisp
;; mode: outline-minor
;; outline-regexp: \";;;;* \"
;; End:" 0 4 (fontified t face font-lock-comment-delimiter-face) 4 11 (fontified t face font-lock-comment-face) 11 12 (fontified t) 12 13 (fontified t) 13 20 (face font-lock-keyword-face fontified t) 20 22 (fontified t) 22 31 (face font-lock-constant-face fontified t) 31 32 (fontified t) 32 33 (fontified t) 33 42 (fontified t) 42 63 (face font-lock-string-face fontified t) 63 64 (fontified t) 64 65 (fontified t) 65 66 (fontified t) 66 67 (fontified t) 67 71 (face font-lock-comment-delimiter-face fontified t) 71 82 (face font-lock-comment-face fontified t) 82 83 (fontified t) 83 86 (face font-lock-comment-delimiter-face fontified t) 86 102 (face font-lock-comment-face fontified t) 102 103 (fontified t) 103 106 (face font-lock-comment-delimiter-face fontified t) 106 122 (face font-lock-comment-face fontified t) 122 123 (fontified t) 123 126 (face font-lock-comment-delimiter-face fontified t) 126 145 (face font-lock-comment-face fontified t) 145 146 (fontified t) 146 149 (face font-lock-comment-delimiter-face fontified t) 149 173 (face font-lock-comment-face fontified t) 173 174 (fontified t) 174 177 (face font-lock-comment-delimiter-face fontified t) 177 181 (face font-lock-comment-face fontified t)) #("
" 0 1 (fontified t) 1 2 (fontified t)) #("
(defun lch-reload-snippets ()
  (interactive)
  (yas-load-directory lch-yasnippet-dir))" 0 1 (fontified t) 1 2 (fontified t) 2 7 (face font-lock-keyword-face fontified t) 7 8 (fontified t) 8 27 (face font-lock-function-name-face fontified t) 27 30 (fontified t) 30 31 (fontified t) 31 46 (fontified t) 46 47 (fontified t) 47 88 (fontified t)) #(";; (setq lch-yasnippet-dir (concat emacs-lib-dir \"/snippets\"))
;; (setq yas-snippet-dirs `(,lch-yasnippet-dir))
;; (yas-global-mode t)" 0 3 (fontified t face font-lock-comment-delimiter-face) 3 62 (fontified t face font-lock-comment-face) 62 63 (fontified t) 63 66 (face font-lock-comment-delimiter-face fontified t) 66 111 (face font-lock-comment-face fontified t) 111 112 (fontified t) 112 115 (face font-lock-comment-delimiter-face fontified t) 115 134 (face font-lock-comment-face fontified t)) #("
" 0 1 (fontified t)) #("(require 'yasnippet)" 0 1 (fontified t) 1 8 (fontified t face font-lock-keyword-face) 8 10 (fontified t) 10 19 (fontified t face font-lock-constant-face) 19 20 (fontified t)) #("(require 'yasnippet)
(defvar lch-yasnippet-dir (concat emacs-lib-dir \"/snippets\"))
(defvar yas-snippet-dirs (concat emacs-lib-dir \"/snippets\")))
(yas-global-mode t)

(defun lch-reload-snippets ()
  (interactive)
  (yas-load-directory lch-yasnippet-dir))
" 0 1 (fontified t) 1 8 (face font-lock-keyword-face fontified t) 8 10 (fontified t) 10 19 (face font-lock-constant-face fontified t) 19 20 (fontified t) 20 21 (fontified t) 21 22 (fontified t) 22 28 (fontified t face font-lock-keyword-face) 28 29 (fontified t) 29 46 (fontified t face font-lock-variable-name-face) 46 69 (fontified t) 69 80 (fontified t face font-lock-string-face) 80 82 (fontified t) 82 83 (fontified t) 83 84 (fontified t) 84 90 (fontified t face font-lock-keyword-face) 90 91 (fontified t) 91 107 (fontified t face font-lock-variable-name-face) 107 130 (fontified t) 130 141 (fontified t face font-lock-string-face) 141 144 (fontified t) 144 145 (fontified t) 145 164 (fontified t) 164 165 (fontified t) 165 166 (fontified t) 166 167 (fontified t) 167 172 (face font-lock-keyword-face fontified t) 172 173 (fontified t) 173 192 (face font-lock-function-name-face fontified t) 192 195 (fontified t) 195 196 (fontified t) 196 211 (fontified t) 211 212 (fontified t) 212 253 (fontified t) 253 254 (fontified t) 254 255 (fontified t)) #("" 0 1 (fontified t)) #(";;; YASnippet
;; Loaded in org.el" 0 4 (fontified t face font-lock-comment-delimiter-face) 4 13 (fontified t face font-lock-comment-face) 13 14 (fontified t) 14 17 (face font-lock-comment-delimiter-face fontified t) 17 33 (face font-lock-comment-face fontified t)) #(";;; YASnippet
;; Loaded in org.el
(require 'yasnippet)
(defvar lch-yasnippet-dir (concat emacs-lib-dir \"/snippets\"))
(defvar yas-snippet-dirs (concat emacs-lib-dir \"/snippets\")))
(yas-global-mode t)

(defun lch-reload-snippets ()
  (interactive)" 0 4 (face font-lock-comment-delimiter-face fontified t) 4 13 (face font-lock-comment-face fontified t) 13 14 (fontified t) 14 17 (fontified t face font-lock-comment-delimiter-face) 17 33 (fontified t face font-lock-comment-face) 33 34 (fontified t) 34 35 (fontified t) 35 42 (fontified t face font-lock-keyword-face) 42 44 (fontified t) 44 53 (fontified t face font-lock-constant-face) 53 54 (fontified t) 54 55 (fontified t) 55 56 (fontified t) 56 62 (fontified t face font-lock-keyword-face) 62 63 (fontified t) 63 80 (fontified t face font-lock-variable-name-face) 80 103 (fontified t) 103 114 (fontified t face font-lock-string-face) 114 116 (fontified t) 116 117 (fontified t) 117 118 (fontified t) 118 124 (fontified t face font-lock-keyword-face) 124 125 (fontified t) 125 141 (fontified t face font-lock-variable-name-face) 141 164 (fontified t) 164 175 (fontified t face font-lock-string-face) 175 178 (fontified t) 178 179 (fontified t) 179 198 (fontified t) 198 199 (fontified t) 199 200 (fontified t) 200 201 (fontified t) 201 206 (face font-lock-keyword-face fontified t) 206 207 (fontified t) 207 226 (face font-lock-function-name-face fontified t) 226 229 (fontified t) 229 230 (fontified t) 230 245 (fontified t))))
(setq-default session-file-alist '(("/Volumes/DATA/Dropbox/.emacs.d/rc/lch-lang.el" 3027 3093 1 nil nil 3027 (overwrite-mode)) ("/Volumes/DATA/Dropbox/.emacs.d/rc/lch-elisp.el" 1402 1 1 nil nil 1402 (overwrite-mode)) ("/Volumes/DATA/Dropbox/.emacs.d/rc/lch-elisp.el_archive" 28539 1868 1 nil nil 28539 (overwrite-mode)) ("~/Dropbox/.emacs.d/rc/lch-binding.el" 2243 1 1 nil nil 2243 (overwrite-mode)) ("~/Dropbox/.emacs.d/rc/dotEmacs" 3580 2187 1 nil nil 3527 (overwrite-mode)) ("~/Dropbox/.emacs.d/rc/lch-env.el" 1982 1983 1 nil nil 1982 (overwrite-mode)) ("~/Dropbox/.emacs.d/rc/lch-elisp-el-get.el" 693 nil 1 nil nil 693 (overwrite-mode)) ("~/Dropbox/.emacs.d/rc/lch-pgm.el" 1608 993 1 nil nil 1022 (overwrite-mode)) ("~/Dropbox/.emacs.d/rc/lch-w3m.el" 137 887 1 nil nil 137 (overwrite-mode)) ("~/Dropbox/.emacs.d/rc/lch-emms.el" 2097 563 1 nil nil 1208 (overwrite-mode))))
(setq-default file-name-history '("~/Dropbox/.emacs.d/rc/lch-elisp.el" "~/Dropbox/.emacs.d/rc/" "/Users/LooChao/.wine/dosdevices/z:/Users/LooChao/Dropbox/.emacs.d/rc/lch-elisp.el_archive" "~/Dropbox/.emacs.d/rc/lch-util.el" "/Users/LooChao/Dropbox/.emacs.d/rc/lch-elisp.el" "/Users/LooChao/Dropbox/.emacs.d/rc/dotEmacs" "/Users/LooChao/Dropbox/.emacs.d/rc/lch-conf.el" "~/Dropbox/.emacs.d/rc/lch-env.el" "~/Dropbox/.emacs.d/site-lisp/color-theme-6.6.0/themes/color-theme-naquadah.el" "/Users/LooChao/Dropbox/.emacs.d/rc/lch-util.el" "/Users/LooChao/Dropbox/.emacs.d/rc/lch-binding.el" "/Users/LooChao/.emacs" "/Users/LooChao/Dropbox/.emacs.d/rc/lch-elisp-el-get.el" "~/Dropbox/.emacs.d/site-lisp/el-get/el-get/el-get.el" "~/Dropbox/.emacs.d/rc/lch-elisp-el-get.el" "/Users/LooChao/Dropbox/.emacs.d/site-lisp/el-get/el-get/el-get.el" "~/Dropbox/.emacs.d/rc/lch-org.el" "~/.emacs" "~/Dropbox/.emacs.d/rc/xwl-emms.el" "~/Dropbox/.emacs.d/rc/lch-emms.el" "~/Dropbox/.emacs.d/rc/lch-pgm.el" "~/Dropbox/.emacs.d/rc/lch-w3m.el" "/Users/LooChao/Dropbox/.emacs.d/rc/xwl-emms.el" "/Users/LooChao/Dropbox/.emacs.d/rc/lch-emms.el"))
(setq-default search-ring '("pop" "elisp" "ibuff" "dired-x" "conf" "lch-el" "env" "var-dir" "lch-env" "lch-eli" "yas" "yasni" "ya" "grep" "hs"))
(setq-default regexp-search-ring '("wi" "auto-com" "smex" "auto-comp" "ido" "mac" "yas" "magit" "ui-theme" "aut" "savep" "recentf" "uni" "CX" "font-font"))
(setq-default buffer-name-history '("lch-elisp.el" "*Messages*" "*Backtrace*" "lch-binding.el" ".emacs" "lch-env.el"))
(setq-default command-history '((find-file "~/Dropbox/.emacs.d/rc/" t) (find-file "~/Dropbox/.emacs.d/rc/lch-elisp.el" t) (switch-to-buffer "lch-elisp.el") (comment-region (region-beginning) (region-end) nil) (switch-to-buffer "*Messages*") (eval-buffer) (find-file "/Users/LooChao/Dropbox/.emacs.d/rc/lch-elisp.el") (describe-variable (quote emacs-var-dir)) (kill-buffer "*Backtrace*") (find-file "/Users/LooChao/Dropbox/.emacs.d/rc/dotEmacs") (find-file "/Users/LooChao/Dropbox/.emacs.d/rc/lch-conf.el") (dired-smart-shell-command "grep var-dir" nil nil) (dired-mark-files-regexp ".*\\.el$" nil) (dired-mark-files-regexp ".*" nil) (dired-smart-shell-command "grep emacs-var-dir" nil nil) (dired-mark-files-regexp "*.el$" nil) (dired-smart-shell-command "grep live.*lib" nil nil) (dired-do-shell-command "grep grep" nil (quote \.\.\.)) (dired-mark-files-regexp "*" nil) (switch-to-buffer "lch-binding.el") (find-file "/Users/LooChao/Dropbox/.emacs.d/rc/lch-util.el") (find-file "/Users/LooChao/Dropbox/.emacs.d/rc/lch-binding.el") (shell nil) (dired-smart-shell-command "find . -type f |grep ." nil nil) (indent-region (region-beginning) (region-end) nil) (switch-to-buffer ".emacs") (switch-to-buffer "lch-env.el") (find-file "/Users/LooChao/.emacs") (kill-buffer "*Messages*")))
(setq-default dired-regexp-history '(".*\\.el$" ".*" "*.el$" "*"))
(setq-default dired-shell-command-history '("grep grep"))
(setq-default extended-command-history '("comment-region" "eshell"))
(setq-default face-name-history '("w3m-tab-background" "default"))
(setq-default grep-find-history '("find . -type f ! -regex \".*/\\({arch}\\|\\.arch-ids\\|\\.svn\\|_darcs\\|\\.bzr\\|\\.git\\|\\.hg\\)/.*\" -print0 | xargs -0 grep -nH -e key-chord" "find . -type f ! -regex \".*/\\({arch}\\|\\.arch-ids\\|\\.svn\\|_darcs\\|\\.bzr\\|\\.git\\|\\.hg\\)/.*\" -print0 | xargs -0 grep -nH -e set-fill-column" "find . -type f ! -regex \".*/\\({arch}\\|\\.arch-ids\\|\\.svn\\|_darcs\\|\\.bzr\\|\\.git\\|\\.hg\\)/.*\" -print0 | xargs -0 grep -nH -e w32" "find . -type f ! -regex \".*/\\({arch}\\|\\.arch-ids\\|\\.svn\\|_darcs\\|\\.bzr\\|\\.git\\|\\.hg\\)/.*\" -print0 | xargs -0 grep -nH -e cua-mode" "find . -type f ! -regex \".*/\\({arch}\\|\\.arch-ids\\|\\.svn\\|_darcs\\|\\.bzr\\|\\.git\\|\\.hg\\)/.*\" -print0 | xargs -0 grep -nH -e auto-compression" "find . -type f ! -regex \".*/\\({arch}\\|\\.arch-ids\\|\\.svn\\|_darcs\\|\\.bzr\\|\\.git\\|\\.hg\\)/.*\" -print0 | xargs -0 grep -nH -e indent-tabs-mode" "find . -type f ! -regex \".*/\\({arch}\\|\\.arch-ids\\|\\.svn\\|_darcs\\|\\.bzr\\|\\.git\\|\\.hg\\)/.*\" -print0 | xargs -0 grep -nH -e whitespace" "find . -type f ! -regex \".*/\\({arch}\\|\\.arch-ids\\|\\.svn\\|_darcs\\|\\.bzr\\|\\.git\\|\\.hg\\)/.*\" -print0 | xargs -0 grep -nH -e savehist" "find . -type f ! -regex \".*/\\({arch}\\|\\.arch-ids\\|\\.svn\\|_darcs\\|\\.bzr\\|\\.git\\|\\.hg\\)/.*\" -print0 | xargs -0 grep -nH -e save-hist" "find . -type f ! -regex \".*/\\({arch}\\|\\.arch-ids\\|\\.svn\\|_darcs\\|\\.bzr\\|\\.git\\|\\.hg\\)/.*\" -print0 | xargs -0 grep -nH -e x-select" "find . -type f ! -regex \".*/\\({arch}\\|\\.arch-ids\\|\\.svn\\|_darcs\\|\\.bzr\\|\\.git\\|\\.hg\\)/.*\" -print0 | xargs -0 grep -nH -e save" "find . -type f ! -regex \".*/\\({arch}\\|\\.arch-ids\\|\\.svn\\|_darcs\\|\\.bzr\\|\\.git\\|\\.hg\\)/.*\" -print0 | xargs -0 grep -nH -e auto-save" "find . -type f ! -regex \".*/\\({arch}\\|\\.arch-ids\\|\\.svn\\|_darcs\\|\\.bzr\\|\\.git\\|\\.hg\\)/.*\" -print0 | xargs -0 grep -nH -e scratch" "find . -type f ! -regex \".*/\\({arch}\\|\\.arch-ids\\|\\.svn\\|_darcs\\|\\.bzr\\|\\.git\\|\\.hg\\)/.*\" -print0 | xargs -0 grep -nH -e var" "find . -type f -exec grep -nH -e compile {} +" "find . -type f -exec grep -nH -e lch-z {} +" "find . -type f ! -regex \".*/\\({arch}\\|\\.arch-ids\\|\\.svn\\|_darcs\\|\\.bzr\\|\\.git\\|\\.hg\\)/.*\" -print0 | xargs -0 grep -nH -e byte-compile" "find . -type f ! -regex \".*/\\({arch}\\|\\.arch-ids\\|\\.svn\\|_darcs\\|\\.bzr\\|\\.git\\|\\.hg\\)/.*\" -print0 | xargs -0 grep -nH -e elc" "find . -type f ! -regex \".*/\\({arch}\\|\\.arch-ids\\|\\.svn\\|_darcs\\|\\.bzr\\|\\.git\\|\\.hg\\)/.*\" -print0 | xargs -0 grep -nH -e find-file-hook" "find . -type f ! -regex \".*/\\({arch}\\|\\.arch-ids\\|\\.svn\\|_darcs\\|\\.bzr\\|\\.git\\|\\.hg\\)/.*\" -print0 | xargs -0 grep -nH -e find-file" "find . -type f ! -regex \".*/\\({arch}\\|\\.arch-ids\\|\\.svn\\|_darcs\\|\\.bzr\\|\\.git\\|\\.hg\\)/.*\" -print0 | xargs -0 grep -nH -e browse-url-firefox" "find . -type f ! -regex \".*/\\({arch}\\|\\.arch-ids\\|\\.svn\\|_darcs\\|\\.bzr\\|\\.git\\|\\.hg\\)/.*\" -print0 | xargs -0 grep -nH -e header"))
(setq-default gud-gdb-history '("gdb --annotate=3 duffing_euler"))
(setq-default hi-lock-face-history '("hi-yellow" "hi-pink" "hi-green" "hi-blue" "hi-black-b" "hi-blue-b" "hi-red-b" "hi-green-b" "hi-black-hb"))
(setq-default hi-lock-regexp-history '("ffap"))
(setq-default ido-buffer-history '("*me"))
(setq-default ido-file-history '("lch-el" "dot" "lch-conf" "lch-elisp" "lch-eli" "rc" "the" "co" "si" "lch-util" "lch-bind" ".emacs" "lch-elis" "el" ".em" "drop"))
(setq-default minibuffer-history '("comment-r" "eval-bu" "comment-rg" "emacs-var-dir" "comment-re" "shell" "indent-re" "el-get-dir"))
(setq-default org-read-date-history '("   "))
(setq-default query-replace-history '("#B" "#C" "lch-modeline-font" "lch-modeline" "lch" "live" "

" "
+" "
" "" "+" "" "有没有一句话让你流泪 - 新浪微博-随时随地分享身边的新鲜事\345\204\277 - Firefox" "微博搜索 - 新浪微博-随时随地分享身边的新鲜事\345\204\277 - Firefox
" "^ *" "^[ 	]" "^[ \\t]+" "^\\w*" ".*www.txtbbs.com.*$" "http://www.txtbbs.com" "-" "=" " " "p" "<f2>" "o" "<f1>" "outline-minor-mode-map"))
(setq-default regexp-history '("ffap"))
(setq-default serial-name-history '("/dev/ttys0"))
(setq-default serial-speed-history '("9600" "1200" "2400" "4800" "14400" "19200" "28800" "38400" "57600" "115200"))
(setq-default shell-command-history '("grep var-dir" "grep emacs-var-dir" "grep live.*lib" "find . -type f |grep ." "pwd"))
(setq-default smex-history '(cd lm 5x5 afm arp dbx dig))
(setq-default w3m-input-url-history '("http://www.princeton.edu/~chaol" "http://paste.lisp.org/display/133715" "http://paste.lisp.org/display/133715#1" "https://github.com/peterhil/emacs-config" "http://www.emacswiki.org/cgi-bin/wiki.pl?Command" "http://p3rl.org/IPC::System::Simple" "http://emacsformacosx.com" "http://api.t.sina.com.cn/oauth/authorize?oauth_token=5837f22c4c41b80d19b60634dd83f027" "http://orgmode.org/worg/dev" "http://orgmode.org/worg/dev/org-build-system.html" "http://orgmode.org/worg/dev/org-build-system.html#sec-4" "http://traeki.freeshell.org/files/viper-sample" "http://www.emacswiki.org/emacs/AnythingScreenshotNarrowingCandidates" "http://www.iciba.com/?s=%E7%8E%B0%E5%9C%A8" "http://www.emacswiki.org/emacs/Anything" "http://www.emacswiki.org/emacs/AnythingScreenshotAllCandidates"))
